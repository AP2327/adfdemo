{
	"name": "hashkey",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Hashinput",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Hashinput2",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Hashout",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "exists1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          name as string,",
				"          phonenumber as string,",
				"          location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          id as string,",
				"          name as string,",
				"          phonenumber as string,",
				"          location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"aggregate1 derive(hashkey = sha2(256,columns())) ~> derivedColumn1",
				"source2 derive(hashkeytgt = sha2(256, columns())) ~> derivedColumn2",
				"derivedColumn1, derivedColumn2 exists(hashkey == hashkeytgt,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"source1 aggregate(groupBy(id),",
				"     each(match(name!='id'), $$ = first($$))) ~> aggregate1",
				"exists1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as string,",
				"          name as string,",
				"          skill as string,",
				"          domain as string,",
				"          age as string,",
				"          location as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}