{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mudhalpipe"
		},
		"AzureDatabricks1_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"firstblob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'firstblob'"
		},
		"firstlink_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'firstlink'"
		},
		"mudhalinkser_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'mudhalinkser'"
		},
		"AzureDatabricks1_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0908-103418-nv4d9ck8"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/foreach')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1_copy1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "mudhalsource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "mudhalsink",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata1_copy1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "fecopy",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-18T11:22:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/fecopy')]",
				"[concat(variables('factoryId'), '/datasets/mudhalsource')]",
				"[concat(variables('factoryId'), '/datasets/mudhalsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mudhalcopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "mudhalcopy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "mudhalsource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "mudhalsink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-17T16:35:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/mudhalsource')]",
				"[concat(variables('factoryId'), '/datasets/mudhalsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pattern_match')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "patternmatching",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "patternmatching",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Pattern": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-31T01:23:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/patternmatching')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "uniquerecords_copy2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "uniquerecords_copy2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-30T15:50:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/uniquerecords_copy2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "hashkey",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "hashkey",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-01T16:48:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/hashkey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"excel": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-08T02:35:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/prajnaanish2327_gmail.com#ext#@prajnaanish2327gmail.onmicrosoft.com/ADBdemo"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-08T10:50:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/unique')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "unique",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "uniquerecords",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-30T15:17:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/uniquerecords')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Corrpt_record')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "firstlink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "Date_value",
						"type": "varchar"
					},
					{
						"name": "Rank_value",
						"type": "varchar"
					},
					{
						"name": "Sunshine_hours",
						"type": "varchar"
					},
					{
						"name": "Cost_of_a_bottle_of_water",
						"type": "varchar"
					},
					{
						"name": "Obesity_levels",
						"type": "varchar"
					},
					{
						"name": "Life_expectancy",
						"type": "varchar"
					},
					{
						"name": "Pollution",
						"type": "varchar"
					},
					{
						"name": "Annual_avg_hours_worked",
						"type": "varchar"
					},
					{
						"name": "Happiness_levels",
						"type": "varchar"
					},
					{
						"name": "Outdoor_activities",
						"type": "varchar"
					},
					{
						"name": "Number_of_take_out_places",
						"type": "varchar"
					},
					{
						"name": "Cost_of_a_monthly_gym_membership",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "corrupt_records"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/firstlink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "firstblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "excelinput"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "HOUR",
						"type": "String"
					},
					{
						"name": "GENDER",
						"type": "String"
					},
					{
						"name": "PRODUCT",
						"type": "String"
					},
					{
						"name": "COLOR",
						"type": "String"
					},
					{
						"name": "SIZE",
						"type": "String"
					},
					{
						"name": "SALE CONSULTANT",
						"type": "String"
					},
					{
						"name": "QUANTITY",
						"type": "String"
					},
					{
						"name": "PRICE",
						"type": "String"
					},
					{
						"name": "VAT",
						"type": "String"
					},
					{
						"name": "TOTAL",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/firstblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Exceloutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Date_value",
						"type": "date"
					},
					{
						"name": "HOUR_value",
						"type": "varchar"
					},
					{
						"name": "GENDER",
						"type": "varchar"
					},
					{
						"name": "PRODUCT",
						"type": "varchar"
					},
					{
						"name": "COLOR",
						"type": "varchar"
					},
					{
						"name": "SIZE_value",
						"type": "varchar"
					},
					{
						"name": "SALE_CONSULTANT_QUANTITY",
						"type": "varchar"
					},
					{
						"name": "PRICE",
						"type": "varchar"
					},
					{
						"name": "VAT_TOTAL",
						"type": "varchar"
					},
					{
						"name": "Processed_filename",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "sales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Foreachcopy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mudhalinkser",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mudhalinkser')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Hashinput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "firstblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "duplicate1.txt",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "phonenumber",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/firstblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Hashinput2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "firstblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "duplicate2.txt",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "phonenumber",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/firstblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Hashout')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "firstblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "skill",
						"type": "String"
					},
					{
						"name": "domain",
						"type": "String"
					},
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/firstblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Uqrecord1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "firstblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "uqrecords1.txt",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "skill",
						"type": "String"
					},
					{
						"name": "domain",
						"type": "String"
					},
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/firstblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fecopy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mudhalinkser",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mudhalinkser')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/match_record')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "firstlink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "Date_value",
						"type": "varchar"
					},
					{
						"name": "Rank_value",
						"type": "varchar"
					},
					{
						"name": "Sunshine_hours",
						"type": "varchar"
					},
					{
						"name": "Cost_of_a_bottle_of_water",
						"type": "varchar"
					},
					{
						"name": "Obesity_levels",
						"type": "varchar"
					},
					{
						"name": "Life_expectancy",
						"type": "varchar"
					},
					{
						"name": "Pollution",
						"type": "varchar"
					},
					{
						"name": "Annual_avg_hours_worked",
						"type": "varchar"
					},
					{
						"name": "Happiness_levels",
						"type": "varchar"
					},
					{
						"name": "Outdoor_activities",
						"type": "varchar"
					},
					{
						"name": "Number_of_take_out_places",
						"type": "varchar"
					},
					{
						"name": "Cost_of_a_monthly_gym_membership",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "matching_records"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/firstlink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mudhalsink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mudhalinkser",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mudhalinkser')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mudhalsource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mudhalinkser",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "*",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mudhalinkser')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pattern')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "firstblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "pattern_matching.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Rank",
						"type": "String"
					},
					{
						"name": "Sunshine hours(City)",
						"type": "String"
					},
					{
						"name": "Cost of a bottle of water(City)",
						"type": "String"
					},
					{
						"name": "Obesity levels(Country)",
						"type": "String"
					},
					{
						"name": "Life expectancy(years) (Country)",
						"type": "String"
					},
					{
						"name": "Pollution(Index score) (City)",
						"type": "String"
					},
					{
						"name": "Annual avg. hours worked",
						"type": "String"
					},
					{
						"name": "Happiness levels(Country)",
						"type": "String"
					},
					{
						"name": "Outdoor activities(City)",
						"type": "String"
					},
					{
						"name": "Number of take out places(City)",
						"type": "String"
					},
					{
						"name": "Cost of a monthly gym membership(City)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/firstblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/uqop2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "firstblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "skill",
						"type": "String"
					},
					{
						"name": "domain",
						"type": "String"
					},
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/firstblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/uqoutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "firstblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "101",
						"type": "String"
					},
					{
						"name": "Anish",
						"type": "String"
					},
					{
						"name": "Databricks",
						"type": "String"
					},
					{
						"name": "CosmosDB",
						"type": "String"
					},
					{
						"name": "21",
						"type": "String"
					},
					{
						"name": "chennai",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/firstblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/uqrecord')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "firstblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "uqrecords.txt",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "skill",
						"type": "String"
					},
					{
						"name": "domain",
						"type": "String"
					},
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/firstblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-8137475234765581.1.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks1_accessToken')]"
					},
					"existingClusterId": "[parameters('AzureDatabricks1_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/firstblob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('firstblob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/firstlink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('firstlink_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mudhalinkser')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('mudhalinkser_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Excel1",
								"type": "DatasetReference"
							},
							"name": "excel"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Exceloutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Date as string,",
						"          HOUR as string,",
						"          GENDER as string,",
						"          PRODUCT as string,",
						"          COLOR as string,",
						"          SIZE as string,",
						"          {SALE CONSULTANT} as string,",
						"          QUANTITY as string,",
						"          PRICE as string,",
						"          VAT as string,",
						"          TOTAL as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'Processed_filename',",
						"     wildcardPaths:['*']) ~> excel",
						"excel sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Date_value as date,",
						"          HOUR_value as string,",
						"          GENDER as string,",
						"          PRODUCT as string,",
						"          COLOR as string,",
						"          SIZE_value as string,",
						"          SALE_CONSULTANT_QUANTITY as string,",
						"          PRICE as string,",
						"          VAT_TOTAL as string,",
						"          Processed_filename as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Date_value = Date,",
						"          HOUR_value = HOUR,",
						"          GENDER,",
						"          PRODUCT,",
						"          COLOR,",
						"          SIZE_value = SIZE,",
						"          SALE_CONSULTANT_QUANTITY = {SALE CONSULTANT},",
						"          PRICE,",
						"          VAT_TOTAL = QUANTITY,",
						"          Processed_filename",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Excel1')]",
				"[concat(variables('factoryId'), '/datasets/Exceloutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/hashkey')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Hashinput",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Hashinput2",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Hashout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "exists1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          phonenumber as string,",
						"          location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          phonenumber as string,",
						"          location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"aggregate1 derive(hashkey = sha2(256,columns())) ~> derivedColumn1",
						"source2 derive(hashkeytgt = sha2(256, columns())) ~> derivedColumn2",
						"derivedColumn1, derivedColumn2 exists(hashkey == hashkeytgt,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"source1 aggregate(groupBy(id),",
						"     each(match(name!='id'), $$ = first($$))) ~> aggregate1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          name as string,",
						"          skill as string,",
						"          domain as string,",
						"          age as string,",
						"          location as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Hashinput')]",
				"[concat(variables('factoryId'), '/datasets/Hashinput2')]",
				"[concat(variables('factoryId'), '/datasets/Hashout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/patternmatching')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pattern",
								"type": "DatasetReference"
							},
							"name": "Pattern"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Corrpt_record",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "match_record",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          City as string,",
						"          Date as string,",
						"          Rank as string,",
						"          {Sunshine hours(City)} as string,",
						"          {Cost of a bottle of water(City)} as string,",
						"          {Obesity levels(Country)} as string,",
						"          {Life expectancy(years) (Country)} as string,",
						"          {Pollution(Index score) (City)} as string,",
						"          {Annual avg. hours worked} as string,",
						"          {Happiness levels(Country)} as string,",
						"          {Outdoor activities(City)} as string,",
						"          {Number of take out places(City)} as string,",
						"          {Cost of a monthly gym membership(City)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false) ~> Pattern",
						"Pattern split(isNull(toDate(Date,'mm/dd/yyyy')),",
						"     disjoint: false) ~> split1@(corrupted, matching)",
						"split1@corrupted sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          City as string,",
						"          Date_value as string,",
						"          Rank_value as string,",
						"          Sunshine_hours as string,",
						"          Cost_of_a_bottle_of_water as string,",
						"          Obesity_levels as string,",
						"          Life_expectancy as string,",
						"          Pollution as string,",
						"          Annual_avg_hours_worked as string,",
						"          Happiness_levels as string,",
						"          Outdoor_activities as string,",
						"          Number_of_take_out_places as string,",
						"          Cost_of_a_monthly_gym_membership as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          City,",
						"          Date_value = Date,",
						"          Rank_value = Rank,",
						"          Sunshine_hours = {Sunshine hours(City)},",
						"          Cost_of_a_bottle_of_water = {Cost of a bottle of water(City)},",
						"          Obesity_levels = {Obesity levels(Country)},",
						"          Life_expectancy = {Life expectancy(years) (Country)},",
						"          Pollution = {Pollution(Index score) (City)},",
						"          Annual_avg_hours_worked = {Annual avg. hours worked},",
						"          Happiness_levels = {Happiness levels(Country)},",
						"          Outdoor_activities = {Outdoor activities(City)},",
						"          Number_of_take_out_places = {Cost of a bottle of water(City)},",
						"          Cost_of_a_monthly_gym_membership = {Cost of a monthly gym membership(City)}",
						"     )) ~> sink1",
						"split1@matching sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          City as string,",
						"          Date_value as string,",
						"          Rank_value as string,",
						"          Sunshine_hours as string,",
						"          Cost_of_a_bottle_of_water as string,",
						"          Obesity_levels as string,",
						"          Life_expectancy as string,",
						"          Pollution as string,",
						"          Annual_avg_hours_worked as string,",
						"          Happiness_levels as string,",
						"          Outdoor_activities as string,",
						"          Number_of_take_out_places as string,",
						"          Cost_of_a_monthly_gym_membership as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          City,",
						"          Date_value = Date,",
						"          Rank_value = Rank,",
						"          Sunshine_hours = {Sunshine hours(City)},",
						"          Cost_of_a_bottle_of_water = {Cost of a bottle of water(City)},",
						"          Obesity_levels = {Obesity levels(Country)},",
						"          Life_expectancy = {Life expectancy(years) (Country)},",
						"          Pollution = {Pollution(Index score) (City)},",
						"          Annual_avg_hours_worked = {Annual avg. hours worked},",
						"          Happiness_levels = {Happiness levels(Country)},",
						"          Outdoor_activities = {Outdoor activities(City)},",
						"          Number_of_take_out_places = {Number of take out places(City)},",
						"          Cost_of_a_monthly_gym_membership = {Cost of a monthly gym membership(City)}",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pattern')]",
				"[concat(variables('factoryId'), '/datasets/Corrpt_record')]",
				"[concat(variables('factoryId'), '/datasets/match_record')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/uniquerecords')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "uqrecord",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "uqoutput",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "firstblob",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          skill as string,",
						"          domain as string,",
						"          age as string,",
						"          location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(id),",
						"     each(match(name!='id'), $$ = last($$))) ~> aggregate1",
						"aggregate1 sort(desc(id, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {101} as string,",
						"          Anish as string,",
						"          Databricks as string,",
						"          CosmosDB as string,",
						"          {21} as string,",
						"          chennai as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/uqrecord')]",
				"[concat(variables('factoryId'), '/datasets/uqoutput')]",
				"[concat(variables('factoryId'), '/linkedServices/firstblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/uniquerecords_copy2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "uqrecord",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Uqrecord1",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "uqop2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "firstblob",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          skill as string,",
						"          domain as string,",
						"          age as string,",
						"          location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          skill as string,",
						"          domain as string,",
						"          age as string,",
						"          location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"union1 aggregate(groupBy(id),",
						"     each(match(name!='id'), $$ = last($$))) ~> aggregate1",
						"aggregate1 sort(desc(id, true)) ~> sort1",
						"source1, source2 union(byName: true)~> union1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          name as string,",
						"          skill as string,",
						"          domain as string,",
						"          age as string,",
						"          location as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/uqrecord')]",
				"[concat(variables('factoryId'), '/datasets/Uqrecord1')]",
				"[concat(variables('factoryId'), '/datasets/uqop2')]",
				"[concat(variables('factoryId'), '/linkedServices/firstblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GITpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}